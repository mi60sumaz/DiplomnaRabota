----------------------------------------------------------------------------------------------------------------------
Generating a cluster of kind eks-managedmachinepool for AWS EKS, createa a MachinePool and a Node Group that it scales:

clusterctl generate cluster mpetrov-capitesteks --flavor eks-managedmachinepool --kubernetes-version v1.30.5 --control-plane-machine-count=2 --worker-machine-count=2 > capiTestEks.yaml

-------------------------------------------------------------------------------
Parameter to choose the name for the control plane resource that shows up in EKS:

eksClusterName: mpetrov-testCapiCluster

--------------------------------------------------------------------------------
Kubectl config change depending on cluster

aws eks --region eu-west-3 update-kubeconfig --name mpetrov-managementCluster

--------------------------------------------------------------------------------
IAM role stack for CAPI configuration:

clusterawsadm bootstrap iam create-cloudformation-stack --config config-bootstrap.yaml

--------------------------------------------------------------------------------
if IAM role does NOT exist for ALB:

eksctl create iamserviceaccount \
  --cluster=mpetrov-testCapiCluster\
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::722377226063:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve


then attach the ALB controller to the SA:

helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=mpetrov-testCapiCluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller
--------------------------------------------------------------------------------
if it does exist:

helm install aws-load-balancer-controller eks/aws-load-balancer-controller   -n kube-system   --set clusterName=mpetrov-wordpressCluster   --set serviceAccount.create=true   --set serviceAccount.name=aws-load-balancer-controller   --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="arn:aws:iam::722377226063:role/mpetrov_stsAssumeRoleWithWebIdentity_eksSAalb"

----------------------------------------------------------------------------------
ALB controller trust policy:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Federated": "arn:aws:iam::722377226063:oidc-provider/oidc.eks.eu-west-3.amazonaws.com/id/935F8A261E7120D21C1884A2EBAF7ED0"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
                "StringEquals": {
                    "oidc.eks.eu-west-3.amazonaws.com/id/935F8A261E7120D21C1884A2EBAF7ED0:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller",
                    "oidc.eks.eu-west-3.amazonaws.com/id/935F8A261E7120D21C1884A2EBAF7ED0:aud": "sts.amazonaws.com"
                }
            }
        }
    ]
}

-----------------------------------------------------------------------------------
if IAM role does not exist for CSI driver:

eksctl create iamserviceaccount \
        --name ebs-csi-controller-sa \
        --namespace kube-system \
        --cluster mpetrov-testCapiCluster \
        --role-name AmazonEKS_EBS_CSI_DriverRole \
        --role-only \
        --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
        --approve

------------------------------------------------------------------------------------
if role does exist:

eksctl create addon --name aws-ebs-csi-driver --cluster mpetrov-testCapiCluster --service-account-role-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/mpetrov_stsAssumeRoleWithWebIdentity_eksSAcsi
